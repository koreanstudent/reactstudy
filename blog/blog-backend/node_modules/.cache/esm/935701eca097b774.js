let Joi,User;_a09‍.x([["register",()=>register],["login",()=>login],["check",()=>check],["logout",()=>logout]]);_a09‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_a09‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);



       const register = async ctx => {
    //회원가입
    // Request Body 검증하기
    const schema = Joi.object().keys({
        username: Joi.string()
        .alphanum()
        .min(3)
        .required(),
        password: Joi.string().required()
    })
    const result = Joi.validate(ctx.request.body, schema);
    if(result.error) {
        ctx.status = 400;
        ctx.body = result.error;
        return;
    }

    const { username, password } = ctx.request.body;
    try {
        // username이 이미 존재하는지 확인
        const exists = await User.findbyUsername(username);
        if (exists) {
            ctx.status = 409;
            return;
        }

        const user = new User({
            username
        })
        await user.setPassword(password); // 비밀번호 저장
        await user.save(); // 데이터베이스에 저장

        // 응답할 데이터에서 hashedPassword 필드 제거
        // const data = user.toJSON();
        // delete data.hashedPassword;
        // ctx.body = data;

        ctx.body = user.serialize();
    } catch (e){
        ctx.throw(500,e);
    }
}

       const login = async ctx => {
    // 로그인
}
       const check = async ctx => {
    // 로그인 상태 확인
}
       const logout = async ctx => {
    // 로그아웃
}

